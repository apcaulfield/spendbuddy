@inherits LayoutComponentBase
@inject AccountService AccountService
@inject ExpenseService ExpenseService
@inject ISessionStorageService SessionStorage

@using System.Text.Json
@using System.Text.RegularExpressions

@using SpendBuddy.Models

<div class="layout-container">
    <!-- Sidebar -->
    <nav class="sidebar @(isSidebarCollapsed ? "collapsed" : "")">
        <div class="sidebar-header">
            <h3>Add Expense</h3>
        </div>
        <div class="mx-3 my-1">
            <label>Amount:</label>
            <div class="input-group">
                <span class="input-group-text">$</span>
                <InputNumber @bind-Value="newExpense.Amount" class="form-control" step="0.01"/>
            </div>
        </div>
        
        <div class="mx-3 my-1">
            <label>Name:</label>
            <InputText @bind-Value="newExpense.Name" class="form-control" maxlength="50" />
        </div>

        <div class="mx-3 my-1">
            <label>Category:</label>
            <InputText @bind-Value="newExpense.Category" class="form-control" />
        </div>

        <NewTagInput AddNewTagCallback="AddNewTag" />
        
        @if (AllNewExpenseTags.Count > 0)
        {
            <TagContainer Tags="AllNewExpenseTags" />
        }

        <div class="mx-3 my-1">
            <label>Notes:</label>
            <InputTextArea @bind-Value="newExpense.Notes" class="form-control" style="height: 180px;"/>
        </div>

        <div class="mx-3 my-1">
            <label>Date:</label>
            <InputDate @bind-Value="newExpense.Timestamp" class="form-control" />
        </div>
        <button type="submit" class="btn btn-primary mx-3 my-2" @onclick="SubmitExpense">Add Expense</button>
    </nav>

    <!-- Main Content -->
    <div class="main-content">
        <header class="main-header">
            <button @onclick="ToggleSidebar">
                <span class="hamburger-icon">&#9776;</span>
            </button>
        </header>
        
        <CascadingValue Value="this">
            <section class="content-body">
                @Body
            </section>
        </CascadingValue>
    </div>
</div>

@if (!string.IsNullOrEmpty(NotificationMessage))
{
    <div class="notification @NotificationClass">@NotificationMessage</div>
}

// Add Bottom Navigation Bar
<div class="bottom-nav">
    <NavLink href="/journal" class="nav-button">
        <div class="nav-icon">
            <span>&#128221;</span>
        </div>
        <div class="nav-label">
            <span>Journal</span>
        </div>
    </NavLink>
    <div class="button-divider"></div>
    <NavLink href="/graph" class="nav-button">
        <div class="nav-icon">
            <span>&#128200;</span>
        </div>
        <div class="nav-label">
            <span>Graph</span>
        </div>
    </NavLink>
</div>

@code {
    private int userID;
    private bool isSidebarCollapsed = false;
    private Expense newExpense = new();

    // Set of all tags applied to the current expense waiting to be added
    public HashSet<string> AllNewExpenseTags {get; set; } = new();
    //Records tags that did not previously exist in database
    public HashSet<string> BrandNewTags {get; set; } = new();

    // Notification properties and method
    private string NotificationMessage = "";
    // Determines appearance of notification
    private string NotificationClass = "";
    
    public async Task ShowNotification(string message, bool isSuccess = true) {
        NotificationMessage = message;
        NotificationClass = isSuccess ? "success" : "error";
        StateHasChanged();
        await Task.Delay(3000);
        NotificationMessage = "";
        NotificationClass = "";
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync(){
        userID = await SessionStorage.GetItemAsync<int>("UserID");
        if (userID == 0){
            throw new InvalidOperationException("Tried accessing sidebar without a User ID.");
        }
        newExpense = new Expense { UserID = userID };
        await ExpenseService.FetchAllCategoriesAsync(userID);
        await ExpenseService.FetchAllTagsAsync(userID);
    }

    private void ToggleSidebar()
    {
        isSidebarCollapsed = !isSidebarCollapsed;
    }

    private async Task SubmitExpense(){
        var errorMessages = new List<string>();
        if (newExpense.Amount <= 0){
            errorMessages.Add("Expense amount must be greater than 0¢.");
        }
        if (string.IsNullOrWhiteSpace(newExpense.Name)){
            errorMessages.Add("Expense name is required.");
        }
        if (string.IsNullOrWhiteSpace(newExpense.Category)){
            errorMessages.Add("Expense category is required.");
        }

        if (errorMessages.Count > 0){
            string combinedError = string.Join(" ", errorMessages);
            await ShowNotification(combinedError, false);
            return;
        }

        // Submit the category if it's new
        if (!ExpenseService.Categories.Contains(newExpense.Category)){
            await ExpenseService.AddCategoryAsync(userID, newExpense.Category);
        }

        // Submit any tags that didn't previously exist in the database
        bool? tagsAdded = null;
        if (BrandNewTags.Count > 0){
            // Add to "user_tags" table. If false an error occurred
            tagsAdded = await ExpenseService.AddUserTagsAsync(userID, BrandNewTags);
            BrandNewTags = new();
        }
        if (tagsAdded == false){
            _ = ShowNotification("An error occurred while trying to add new tags to the database. Expense not submitted.", false);
            return;
        }

        // Submit the expense itself
        var newExpenseID = await ExpenseService.AddExpenseAsync(newExpense, AllNewExpenseTags);
        _ = ShowNotification($"Expense \"{newExpense.Name}\" added!", true);
        AllNewExpenseTags = new();
        newExpense = new Expense { UserID = userID };
    }

    private void AddNewTag(string newTag){
        if (!string.IsNullOrWhiteSpace(newTag)){

            // Removes whitespace from beginning and end of string
            newTag = newTag.Trim();

            // Removes all consecutive occurences of whitespace characters inside of string
            newTag = Regex.Replace(newTag, @"\s{2,}", " ");

            if (!Regex.IsMatch(newTag, "^[a-zA-Z0-9 ]+$")){
                _ = ShowNotification("Special characters are not allowed in tags.", false);
                return;
            }

            if (AllNewExpenseTags.Add(newTag)){
                _ = ShowNotification($"Tag \"{newTag}\" applied.", true);

                // Tag did not previously exist
                if (!ExpenseService.Tags.Contains(newTag)){
                    BrandNewTags.Add(newTag);
                }

                newTag = "";
            }
            else{
                _ = ShowNotification($"Tag \"{newTag}\" has already been applied!", false);
            }
        }
        else{
            _ = ShowNotification("Tag cannot be empty!", false);
        }
    }
}

<style>
    .layout-container {
        display: flex;
        flex-direction: row;
        height: 100vh;
    }

    .sidebar {
        background-color: #301934;
        color: white;
        width: 300px;
        transition: width 0.3s;
        display: flex;
        flex-direction: column;
    }

    .sidebar-header {
        padding: 1rem;
        text-align: center;
        border-bottom: 1px solid #444;
    }

    .sidebar-menu {
        list-style-type: none;
        padding: 0;
        margin: 0;
    }

    .sidebar-menu li {
        padding: 0.75rem 1rem;
    }

    .sidebar-menu li a {
        color: #ccc;
        text-decoration: none;
    }

    .sidebar-menu li a:hover {
        color: #fff;
    }

    /* Collapsed Sidebar */
    .sidebar.collapsed {
        width: 0px;
        overflow: hidden;
        white-space: nowrap;
    }

    /* Child elements in sidebar */
    .sidebar.collapsed * {
        display: none;
    }

    /* Main Content */
    .main-content {
        flex: 1;
        display: flex;
        flex-direction: column;
    }

    .main-header {
        background-color: #f2f2f2;
        padding: 1rem;
        border-bottom: 1px solid #ddd;
        text-align: left;
    }

    .content-body {
        padding: 1rem;
        overflow-y: auto;
        flex: 1;
    }

    .tag-container {
        display: flex;
        flex-wrap: wrap;
        gap: 2px;
        max-height: 130px;
        overflow-y: auto; /* Enables vertical scrolling if content overflows */
        overflow-x: hidden; /* Prevents horizontal overflow */
    }

    .tag {
        background: rgba(255, 255, 255, 0.3); /* White with 30% opacity */
        backdrop-filter: blur(10px);
        border-radius: 15px; /* Rounded corners */
        padding: 6px 15px;
        color: white;
        width: auto;
        text-align: center;
        margin: 2px;
        align-items: center; /* Vertically center */
        gap: 6px; /* Space between text and close button */
        word-wrap: break-word;
        overflow-wrap: break-word;
        max-width: 250px;
    }

    .tag .btn-close {
        margin-left: 8px;
        filter: invert(1); /* Makes the close button white */
    }

    .notification {
        position: fixed;
        bottom: 20px;
        right: 20px;
        color: white;
        padding: 15px 20px;
        border-radius: 10px;
        opacity: 0;
        animation: fadeInOut 3s forwards;
        max-width: 20%;
    }
    .notification.success {
        background-color: darkgreen;
    }
    .notification.error {
        background-color: red;
    }
    
    @@keyframes fadeInOut {
        0% { opacity: 0; transform: translateY(20px); }
        10% { opacity: 1; transform: translateY(0); }
        90% { opacity: 1; transform: translateY(0); }
        100% { opacity: 0; transform: translateY(20px); }
    }

    .bottom-nav {
        /* Switch to a grid layout with two equal columns separated by a divider */
        display: grid;
        grid-template-columns: 1fr auto 1fr;
        position: fixed;
        bottom: 0;
        width: 100%;
        background-color: black;
        border-top-left-radius: 15px;
        border-top-right-radius: 15px;
        z-index: 1000;
    }
    .bottom-nav .nav-button {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        text-align: center;
        text-decoration: none !important;
        font-size: 14px;
        color: white;
    }
    .bottom-nav .nav-button:hover {
        background-color: rgba(255, 255, 255, 0.1);
    }
    /* New styles for first and last nav buttons */
    .bottom-nav .nav-button:first-of-type {
        border-top-left-radius: 15px;
    }
    .bottom-nav .nav-button:last-of-type {
        border-top-right-radius: 15px;
    }
    .bottom-nav .nav-icon {
        padding: 5px;
    }
    .button-divider {
        width: 1px;
        background-color: #555;
        /* grid layout automatically centers this divider */
    }
</style>