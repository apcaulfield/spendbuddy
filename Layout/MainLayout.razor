@inherits LayoutComponentBase
@inject AccountService AccountService
@inject ExpenseService ExpenseService

@using System.Text.Json
@using System.Text.RegularExpressions

@using SpendBuddy.Models

<div class="layout-container">
    <!-- Sidebar -->
    <nav class="sidebar @(isSidebarCollapsed ? "collapsed" : "")">
        <div class="sidebar-header">
            <h3>Add Expense</h3>
        </div>
        <div class="mx-3 my-1">
            <label>Amount:</label>
            <div class="input-group">
                <span class="input-group-text">$</span>
                <InputNumber @bind-Value="newExpense.Amount" class="form-control" step="0.01"/>
            </div>
        </div>
        
        <div class="mx-3 my-1">
            <label>Name:</label>
            <InputText @bind-Value="newExpense.Name" class="form-control" />
        </div>

        <div class="mx-3 my-1">
            <label>Category:</label>
            <InputText @bind-Value="newExpense.Category" class="form-control" />
        </div>

        <div class="mx-3 my-1">
            <label>Add Tags:</label>
            <InputText @bind-Value="NewTag" class="form-control" @onkeyup="TagInputKeyPress" maxlength="50"/>
        </div>
        
        @if (newExpense.Tags.Count > 0)
        {
            <div class="tag-container mx-3 my-1">
                @foreach (string tag in newExpense.Tags.ToList())
                {
                    <div class="tag">
                        @tag <span class="close-btn" @onclick="() => newExpense.Tags.Remove(tag)">&times;</span>
                    </div>
                }
            </div>
        }

        <div class="mx-3 my-1">
            <label>Notes:</label>
            <InputTextArea @bind-Value="newExpense.Notes" class="form-control" style="height: 180px;"/>
        </div>

        <div class="mx-3 my-1">
            <label>Date:</label>
            <InputDate @bind-Value="newExpense.Timestamp" class="form-control" />
        </div>
        <button type="submit" class="btn btn-primary mx-3 my-2">Add Expense</button>
        <div class="mx-3 my-1">@message</div>
    </nav>

    <!-- Main Content -->
    <div class="main-content">
        <header class="main-header">
            <button @onclick="ToggleSidebar">
                <span class="hamburger-icon">&#9776;</span>
            </button>
        </header>
        
        <section class="content-body">
            @Body
        </section>
    </div>
</div>

@code {
    private bool pressedEnter = false;
    private bool isSidebarCollapsed = false;
    private Expense? newExpense;

    public string NewTag {get; set; }

    private string message = "placeholder";

    protected override void OnInitialized(){
        newExpense = new Expense { UserID = AccountService.UserID };
    }

    private void ToggleSidebar()
    {
        isSidebarCollapsed = !isSidebarCollapsed;
    }

    private async Task SubmitExpense(){
        if (pressedEnter){
            return;
        }
        var newExpenseID = await ExpenseService.AddExpenseAsync(newExpense);
        message = "Expense successfully added!";
        newExpense = new Expense { UserID = AccountService.UserID };
    }

    private void TagInputKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            AddNewTag();
        }
    }

    private void AddNewTag(){
        Console.WriteLine(NewTag);

        if (!string.IsNullOrWhiteSpace(NewTag)){

            // Removes whitespace from beginning and end of string
            NewTag = NewTag.Trim();

            // Removes all consecutive occurences of whitespace characters inside of string
            NewTag = Regex.Replace(NewTag, @"\s{2,}", " ");

            if (!Regex.IsMatch(NewTag, "^[a-zA-Z0-9 ]+$")){
                message = "Special characters not allowed in tags.";
                return;
            }

            if (newExpense.Tags.Add(NewTag)){
                message = $"Tag {NewTag} applied.";
                NewTag = "";
            }
            else{
                message = "Tag already applied!";
            }
        }
        else{
            message = "Tag cannot be empty!";
        }
    }
}

<style>
    .layout-container {
        display: flex;
        flex-direction: row;
        height: 100vh;
    }

    /* Sidebar Styles */
    .sidebar {
        background-color: #301934;
        color: white;
        width: 300px;
        transition: width 0.3s;
        display: flex;
        flex-direction: column;
    }

    .sidebar-header {
        padding: 1rem;
        text-align: center;
        border-bottom: 1px solid #444;
    }

    .sidebar-menu {
        list-style-type: none;
        padding: 0;
        margin: 0;
    }

    .sidebar-menu li {
        padding: 0.75rem 1rem;
    }

    .sidebar-menu li a {
        color: #ccc;
        text-decoration: none;
    }

    .sidebar-menu li a:hover {
        color: #fff;
    }

    /* Collapsed Sidebar */
    .sidebar.collapsed {
        width: 0px;
        overflow: hidden;
        white-space: nowrap;
    }

    /* Child elements in sidebar */
    .sidebar.collapsed * {
        display: none;
    }

    /* Main Content */
    .main-content {
        flex: 1;
        display: flex;
        flex-direction: column;
    }

    .main-header {
        background-color: #f2f2f2;
        padding: 1rem;
        border-bottom: 1px solid #ddd;
        text-align: left;
    }

    .content-body {
        padding: 1rem;
        overflow-y: auto;
        flex: 1;
    }

    .tag-container {
        display: flex;
        flex-wrap: wrap;
        gap: 2px;
        max-height: 130px; /* Adjust this height based on your needs */
        overflow-y: auto; /* Enables vertical scrolling if content overflows */
        overflow-x: hidden; /* Prevents horizontal overflow */
    }

    .tag {
        background: rgba(255, 255, 255, 0.3); /* White with 30% opacity */
        backdrop-filter: blur(10px);
        border-radius: 15px; /* Rounded corners */
        padding: 6px 15px;
        color: white;
        width: auto;
        text-align: center;
        margin: 2px;
        align-items: center; /* Vertically center */
        gap: 6px; /* Space between text and close button */
        word-wrap: break-word;
        overflow-wrap: break-word;
        max-width: 250px;
    }

    .close-btn {
        font-size: 16px;
        cursor: pointer;
        color: white;
        background: rgba(255, 255, 255, 0.2);
        border-radius: 35%;
        width: 20px;
        height: 20px;
        display: inline-flex;
        align-items: center;
        justify-content: center;
    }

    .close-btn:hover{
        background: rgba(255, 255, 255, 0.5); /* Lit up background */
    }

</style>