@page "/login"
@layout EmptyLayout
@inject AccountService AccountService
@inject NavigationManager Navigation

@using SpendBuddy.Models

<div class="login-container">
    <div class="appear-animation">
        <img src="logo.png" alt="Logo" />
        <div class = "login-form">
            @if (isLoading){
                <div class="loading-spinner">
                    <div class="spinner"></div>
                    <div>Logging in...</div>
                </div>
            }
            else{
                <div class="form-group mb-1">
                    <label>Username</label>
                    <InputText class="form-control" @bind-Value="userCredentials.Username" />
                </div>

                <div class="form-group mb-2">
                    <label>Password</label>
                    <InputText type="password" class="form-control" @bind-Value="userCredentials.Password" />
                </div>

                <div class="flex justify-between">
                    <button class="btn btn-primary" @onclick="OnLogin">Login</button>
                    <button class="btn btn-secondary" @onclick="OnSignUp">Sign Up</button>
                </div>
                @if (!string.IsNullOrEmpty(errorMessage)){
                    <p>@errorMessage</p>
                }
            }
        </div>
    </div>
</div>

@code {
    private User userCredentials = new User();
    private string errorMessage = "";
    private bool isLoading = false;

    private async Task OnLogin()
    {
        errorMessage = "";
        isLoading = true;
        try
        {
            bool response = await AccountService.RequestLogin(userCredentials);
            if (response)
            {
                Navigation.NavigateTo("/journal");
            }
            else
            {
                errorMessage = AccountService.ErrorMessage;
            }
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task OnSignUp()
    {
        errorMessage = "";
        isLoading = true;
        try
        {
            bool response = await AccountService.CreateUser(userCredentials);
            if (response)
            {
                Navigation.NavigateTo("/journal");
            }
            else
            {
                errorMessage = AccountService.ErrorMessage;
            }
        }
        finally
        {
            isLoading = false;
        }
    }
}

<style>
    .login-container {
        display: flex;
        flex-direction: column;
        justify-content: center; /* Centers horizontally */
        align-items: center; /* Centers vertically */
        height: 100vh; /* Full viewport height */
        background: linear-gradient(to right, #c94b4b, #4b134f);
    }

    .login-form {
        padding: 20px;
        border-radius: 8px; /* Optional: rounded corners */
        box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1); /* Optional: subtle shadow */
        background: white;
    }

    .loading-spinner {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
    }

    .spinner {
        width: 40px;
        height: 40px;
        border: 4px solid rgba(0, 0, 0, 0.1);
        border-top: 4px solid #4b134f;
        border-radius: 50%;
        animation: spin 1s linear infinite;
    }

    @@keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }

    @@keyframes pulse {
        0% {transform: scale(1.2);
        opacity: 0; }
        100% {transform: scale(1); 
        opacity 1; }
    }

    .appear-animation {
        display: inline-block;
        animation: pulse 1s ease-in-out 1;
    }
</style>