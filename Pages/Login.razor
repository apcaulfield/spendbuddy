@page "/login"
@layout EmptyLayout
@inject AccountService AccountService
@inject NavigationManager Navigation

@using SpendBuddy.Models

<div class="login-container">
    <img src="logo.png" alt="Logo" />
    <div class = "login-form">
        @if (!string.IsNullOrEmpty(loadingText)){
            <div class="loading-spinner">
                <div class="spinner"></div>
                <div>@loadingText</div>
            </div>
        }
        else{
            <div class="form-group mb-1">
                <label>Username</label>
                <InputText class="form-control" @bind-Value="userCredentials.Username" @onfocus="StopRepeatingPulse" />
            </div>

            <div class="form-group mb-3">
                <label>Password</label>
                <InputText type="password" class="form-control" @bind-Value="userCredentials.Password" @onfocus="StopRepeatingPulse" />
            </div>

            <div class="flex justify-between">
                <button class="btn btn-primary" @onclick="OnLogin">Login</button>
                <button class="btn btn-secondary" @onclick="OnSignUp">Sign Up</button>
            </div>
            @if (!string.IsNullOrEmpty(errorMessage)){
                <div class="mt-1">@errorMessage</div>
            }
        }
    </div>
</div>

@code {
    private User userCredentials = new User();
    private string errorMessage = "";
    private string loadingText;

    private string animationClass = "repeating-pulse";

    // Called when the user interacts with the page to stop animation
    private void StopRepeatingPulse()
    {
        animationClass = "repeating-pulse paused-pulse";
    }

    private async Task OnLogin()
    {
        errorMessage = "";
        loadingText = "Logging in...";
        try
        {
            bool response = await AccountService.RequestLogin(userCredentials);
            if (response)
            {
                Navigation.NavigateTo("/journal");
            }
            else
            {
                errorMessage = AccountService.ErrorMessage;
            }
        }
        finally
        {
            loadingText = "";
        }
    }

    private async Task OnSignUp()
    {
        errorMessage = "";
        loadingText = "Creating account...";
        try
        {
            bool response = await AccountService.CreateUser(userCredentials);
            if (response)
            {
                Navigation.NavigateTo("/journal");
            }
            else
            {
                errorMessage = AccountService.ErrorMessage;
            }
        }
        finally
        {
            loadingText = "";
        }
    }
}

<style>
    .login-container {
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        height: 100vh;
        background: linear-gradient(to right, #c94b4b, #4b134f);
    }

    .login-form {
        padding: 20px;
        border-radius: 16px;
        background: white;
        width: 40vw;
    }

    .loading-spinner {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
    }

    .spinner {
        width: 40px;
        height: 40px;
        border: 4px solid rgba(0, 0, 0, 0.1);
        border-top: 4px solid #4b134f;
        border-radius: 50%;
        animation: spin 1s linear infinite;
    }

    @@keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
</style>