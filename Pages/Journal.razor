@page "/journal"
@inject AccountService AccountService
@inject ExpenseService ExpenseService
@inject ISessionStorageService SessionStorage

@using System.Text.RegularExpressions

@layout MainLayout

<PageTitle>Journal</PageTitle>

<h1>Journal</h1>

<p>View, log, and modify expenses.</p>

@if (ExpenseService.Expenses == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table w-full">
        <thead>
            <tr>
                <th class="border">Amount</th>
                <th class="border">Name</th>
                <th class="border">Category</th>
                <th class="border">Tags</th>
                <th class="border">Notes</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var expense in ExpenseService.Expenses)
            {
                // All tags corresponding the current expense
                List<string> tags = ExpenseService.ExpenseTagPairs
                .Where(pair => pair.ExpenseID == expense.ExpenseID)
                .Select(pair => pair.Tag)
                .ToList();

                if (ExpenseService.mostRecentTimestamp == null || expense.Timestamp != ExpenseService.mostRecentTimestamp)
                {
                    <tr class="date-row">
                        <td colspan="6" class="font-bold">
                            @expense.Timestamp.ToString("MM/dd/yyyy")
                        </td>
                    </tr>
                    ExpenseService.mostRecentTimestamp = expense.Timestamp;
                }
                <tr @onclick="@(() => OpenEditModal(expense))">
                    <td class="border">$@expense.Amount.ToString("F2")</td>
                    <td class="border">@expense.Name</td>
                    <td class="border">@expense.Category</td>
                    <td class="border">
                        @foreach (string tag in tags){
                            <div class="journal-tag">@tag</div>
                        }
                    </td>
                    <td class="border">@expense.Notes</td>
                </tr>
            }
        </tbody>
    </table>
}

@if (showModal && editingExpense != null)
{
    <div class="modal-overlay" style="position:fixed; top:0; left:0; right:0; bottom:0; background:rgba(0,0,0,0.5); display:flex; align-items:center; justify-content:center;" @onclick="CloseModal">
        <div class="modal-content" @onclick:stopPropagation style="background:white; padding:20px; max-width:500px; align-items: center;">
            <h3>Edit Expense</h3>
            <div class="mx-3 my-1">
                <label>Name:</label>
                <InputText @bind-Value="editingExpense.Name" class="form-control" />
            </div>
             <div class="mx-3 my-1">
                <label>Amount:</label>
                    <div class="input-group">
                    <span class="input-group-text">$</span>
                    <InputNumber @bind-Value="editingExpense.Amount" class="form-control" step="0.01"/>
                </div>
            </div>
            <div class="mx-3 my-1">
                <label>Category:</label>
                <InputText @bind-Value="editingExpense.Category" class="form-control" />
            </div>
            
            <NewTagInput AddNewTagCallback="AddNewTag"/>
            
            @if (AllNewTags.Count > 0)
            {
                <TagContainer Tags="AllNewTags" />
            }

            <div class="mx-3 my-1">
                <label>Notes:</label>
                <textarea class="form-control" @bind="editingExpense.Notes"></textarea>
            </div>
            <button type="submit" class="btn btn-primary mx-3 mt-2" @onclick="SaveExpense">Save</button>
            <button type="submit" class="btn btn-primary mx-3 my-2" @onclick="CloseModal">Cancel</button>
        </div>
    </div>
}

@code {
    private int userID;
    private bool showModal = false;
    private Expense editingExpense;
    public string NewTag {get; set; }

    public HashSet<string> AllNewTags {get; set; } = new();
    public HashSet<string> BrandNewTags {get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        userID = await SessionStorage.GetItemAsync<int>("UserID");
        if (userID == 0){
            throw new InvalidOperationException("Tried accessing journal without a User ID.");
        }
        await ExpenseService.FetchPageOfExpensesAsync(userID, 0);
        ExpenseService.OnExpensesUpdated += RefreshTable;
    }

    private void RefreshTable(){
        InvokeAsync(StateHasChanged);
    }

    private void OpenEditModal(Expense expense)
    {
        editingExpense = expense;
        showModal = true;
    }

    private void CloseModal()
    {
        showModal = false;
    }

    // Updated to accept the tag from NewTagInput
    private void AddNewTag(string newTag){
        if (!string.IsNullOrWhiteSpace(newTag)){
            // Removes whitespace from beginning and end of string
            newTag = newTag.Trim();

            // Removes all consecutive occurences of whitespace characters inside of string
            newTag = Regex.Replace(newTag, @"\s{2,}", " ");

            if (!Regex.IsMatch(newTag, "^[a-zA-Z0-9 ]+$")){
                return;
            }
            if (AllNewTags.Add(newTag)){
                // Tag did not previously exist
                if (!ExpenseService.Tags.Contains(newTag)){
                    BrandNewTags.Add(newTag);
                }
                NewTag = "";
                StateHasChanged();
            }
        }
    }

    private async Task SaveExpense(){
        // Submit the category if it's new
        if (!ExpenseService.Categories.Contains(editingExpense.Category)){
            await ExpenseService.AddCategoryAsync(userID, editingExpense.Category);
        }

        // Submit any tags that didn't previously exist in the database
        bool? tagsAdded = null;
        if (BrandNewTags.Count > 0){
            // Add to "user_tags" table. If false an error occurred
            tagsAdded = await ExpenseService.AddUserTagsAsync(userID, BrandNewTags);
            BrandNewTags = new();
        }
        if (tagsAdded == false){
            return;
        }

        // Submit the expense itself
        var editingExpenseID = await ExpenseService.AddExpenseAsync(editingExpense, AllNewTags);
        AllNewTags = new();
        editingExpense = new Expense { UserID = userID };
    }
}

<style>
    .date-row {
        background-color: #e5e7eb;
        font-weight: bold;
    }

    .journal-tag {
        display: inline-block;
        background-color:  #e5e7eb;
        border-radius: 15px;
        padding: 6px 15px;
        color: black !important;
        text-align: center;
        margin: 2px;
        align-items: center;
        gap: 6px;
        word-wrap: break-word;
        overflow-wrap: break-word;
        max-width: 250px;
    }

    table.table th,
    table.table td {
    vertical-align: middle;
    }
</style>
