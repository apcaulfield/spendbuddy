@page "/journal"
@inject AccountService AccountService
@inject ExpenseService ExpenseService

@layout MainLayout

<PageTitle>Journal</PageTitle>

<h1>Journal</h1>

<p>View, log, and modify expenses.</p>

@if (ExpenseService.Expenses == null)
{
    <p><em>Loading...</em></p>
}
else
{
<table class="table w-full">
    <thead>
        <tr>
            <th class="border">Amount</th>
            <th class="border">Name</th>
            <th class="border">Category</th>
            <th class="border">Tags</th>
            <th class="border">Notes</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var expense in ExpenseService.Expenses)
        {
            // All tags corresponding the current expense
            List<string> tags = ExpenseService.ExpenseTagPairs
            .Where(pair => pair.ExpenseID == expense.ExpenseID)
            .Select(pair => pair.Tag)
            .ToList();

            if (ExpenseService.mostRecentTimestamp == null || expense.Timestamp != ExpenseService.mostRecentTimestamp)
            {
                <tr class="date-row">
                    <td colspan="6" class="font-bold">
                        @expense.Timestamp.ToString("MM/dd/yyyy")
                    </td>
                </tr>
                ExpenseService.mostRecentTimestamp = expense.Timestamp;
            }
            <tr>
                <td class="border">$@expense.Amount.ToString("F2")</td>
                <td class="border">@expense.Name</td>
                <td class="border">@expense.Category</td>
                <td class="border">
                    @foreach (string tag in tags){
                        <div class="journal-tag">@tag</div>
                    }
                </td>
                <td class="border">@expense.Notes</td>
            </tr>
        }
    </tbody>
</table>
}

@code {
    protected override async Task OnInitializedAsync()
    {
        await ExpenseService.FetchPageOfExpensesAsync(AccountService.UserID, 0);
        ExpenseService.OnExpensesUpdated += RefreshTable;
    }

    private void RefreshTable(){
        InvokeAsync(StateHasChanged);
    }
}

<style>
    .date-row {
        background-color: #e5e7eb;
        font-weight: bold;
    }

    .journal-tag {
        display: inline-block;
        background-color:  #e5e7eb;
        border-radius: 15px;
        padding: 6px 15px;
        color: black !important;
        text-align: center;
        margin: 2px;
        align-items: center;
        gap: 6px;
        word-wrap: break-word;
        overflow-wrap: break-word;
        max-width: 250px;
    }

    table.table th,
    table.table td {
    vertical-align: middle;
    }
</style>
