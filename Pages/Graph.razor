@page "/graph"
@inject ExpenseService ExpenseService
@inject AccountService AccountService
@inject ISessionStorageService SessionStorage

@layout MainLayout
@{
	// Chart dimensions and margins
	double marginLeft = 50, marginRight = 10, marginTop = 10, marginBottom = 30;
	double svgWidth = 720, svgHeight = 360;
	double chartWidth = svgWidth - marginLeft - marginRight;
	double chartHeight = svgHeight - marginTop - marginBottom;

	// Include past 28 days, including days with $0 worth of expenses
	var endDate = DateTime.Today;
	var startDate = endDate.AddDays(-27);

	// Group expenses to a single point
	var expenseGroups = ExpenseService.Expenses
	    .Where(e => {
			var dt = e.Timestamp.ToDateTime(TimeOnly.MinValue).Date;
			return dt >= startDate && dt <= endDate;
		})
	    .GroupBy(e => e.Timestamp.ToDateTime(TimeOnly.MinValue).Date)
	    .ToDictionary(g => g.Key, g => g.Select(exp => new { exp.Name, exp.Amount }).ToList());
	var dailyExpenses = new List<dynamic>();
	for (var date = startDate; date <= endDate; date = date.AddDays(1))
	{
	    if(expenseGroups.ContainsKey(date))
	    {
	        var info = expenseGroups[date];
	        // Place each expense in the tooltip on a newline
	        var tooltipText = string.Join("\n", info.Select(exp => $"{exp.Name}: ${exp.Amount:F2}"));
	        dailyExpenses.Add(new { Date = date, TotalAmount = info.Sum(exp => exp.Amount), Tooltip = tooltipText });
	    }
	    else
	    {
	        dailyExpenses.Add(new { Date = date, TotalAmount = 0.0, Tooltip = "" });
	    }
	}
	
	int numPoints = dailyExpenses.Count;
	double maxAmount = dailyExpenses.Any(x => (double)x.TotalAmount > 0)
		? dailyExpenses.Max(x => (double)x.TotalAmount)
		: 1;

    var points = new List<string>();
    // lineCount computes tooltip dimensions
    var circles = new List<(double x, double y, string tooltip, double totalAmount, double textWidth, int lineCount)>();
    for (var i = 0; i < numPoints; i++){
        var daily = dailyExpenses[i];
        double x = marginLeft + (numPoints > 1 ? i * (chartWidth / (numPoints - 1)) : chartWidth / 2);
        double y = marginTop + chartHeight * (1 - ((double)daily.TotalAmount / maxAmount));
        points.Add($"{x},{y}");
        string tooltipText = daily.Tooltip;
        double textWidth = 0;
        int lineCount = 0;
        if(!string.IsNullOrEmpty(tooltipText)) {
	        var lines = tooltipText.Split('\n');
	        textWidth = lines.Max(l => l.Length) * 5.5;
            lineCount = lines.Length;
	    }
	    circles.Add((x, y, tooltipText, (double)daily.TotalAmount, textWidth, lineCount));
    }
    var polylinePoints = string.Join(" ", points);

    int yTickCount = 5;
    var yTicks = new List<(double y, double val)>();
    for (int i = 0; i <= yTickCount; i++){
        double value = (maxAmount / yTickCount) * i;
        double yPos = marginTop + chartHeight * (1 - (i / (double)yTickCount));
        yTicks.Add((yPos, value));
    }

    // Create x-axis ticks
    var xTicks = new List<(double x, string label)>();
    for (int i = 0; i < numPoints; i++){
        double xPos = marginLeft + (numPoints > 1 ? i * (chartWidth / (numPoints - 1)) : chartWidth / 2);
        xTicks.Add((xPos, dailyExpenses[i].Date.ToString("M/d")));
    }
}

<svg viewBox="0 0 720 360" width="100%" height="100%">
	<!-- Draw axes -->
	<line x1="@((int)marginLeft)" y1="@((int)(marginTop + chartHeight))" 
	      x2="@((int)(marginLeft + chartWidth))" y2="@((int)(marginTop + chartHeight))" stroke="black" />
	<line x1="@((int)marginLeft)" y1="@((int)marginTop)" 
	      x2="@((int)marginLeft)" y2="@((int)(marginTop + chartHeight))" stroke="black" />
	
	<!-- Draw y-axis ticks and labels -->
    @foreach(var (y, val) in yTicks)
    {
        <line x1="@((int)(marginLeft - 5))" y1="@((int)y)" 
              x2="@((int)marginLeft)" y2="@((int)y)" stroke="black" />
        <svg:text x="@((int)(marginLeft - 10))" y="@((int)y)" text-anchor="end" alignment-baseline="middle" font-size="10">
            $@val.ToString("0.##")
        </svg:text>
    }
    
    <!-- Draw x-axis ticks and labels -->
    @foreach(var (x, label) in xTicks)
    {
        <line x1="@((int)x)" y1="@((int)(marginTop + chartHeight))" 
              x2="@((int)x)" y2="@((int)(marginTop + chartHeight + 5))" stroke="black" />
        <svg:text x="@((int)x)" y="@((int)(marginTop + chartHeight + 15))" text-anchor="middle" font-size="8">
            @label
        </svg:text>
    }
	
	<!-- Axis labels -->
	<svg:text x="@((int)(marginLeft + chartWidth/2))" y="@((int)(svgHeight - 5))" text-anchor="middle">
	</svg:text>
	<svg:text x="15" y="@((int)(marginTop + chartHeight/2))" text-anchor="middle" transform='@($"rotate(-90,15,{(int)(marginTop + chartHeight/2)})")'>
	</svg:text>
	
	<!-- Draw line chart -->
	<polyline points="@polylinePoints" fill="none" stroke="#4CAF50" stroke-width="2" />
	
	<!-- Draw circular data points with tooltips -->
	@foreach(var (x, y, tooltip, totalAmount, textWidth, lineCount) in circles)
	{
		<g class="data-point" onmouseover="this.parentNode.appendChild(this)">
			<circle cx="@x" cy="@y" r="4" fill="#4CAF50" />
			@if (!string.IsNullOrEmpty(tooltip))
			{
				var lineHeight = 15;
				var padding = 4; // added padding for top and bottom
				var tooltipHeight = (lineCount * lineHeight) + (2 * padding);
                
				<g class="tooltip-container" visibility="hidden">
					<rect class="tooltip-bg" x="@(x + 5)" y="@(y - tooltipHeight)" 
						  rx="4" ry="4" width="@( (textWidth + 12) * 0.85)" height="@tooltipHeight" fill="rgba(0,0,0,0.8)" />
					<text class="tooltip-text" x="@(x + 5 + ((textWidth + 12) * 0.85)/2)" 
						  y="@(y - tooltipHeight/2)" fill="white" font-size="9px" text-anchor="middle" dominant-baseline="middle">
						@{ bool first = true; }
						@foreach (var line in tooltip.Split('\n'))
						{
							if(first)
							{
								<tspan x="@(x + 5 + ((textWidth + 12) * 0.85)/2)" dy="-@((lineCount - 1) * lineHeight / 2)">@line</tspan>
                                { first = false; }
							}
							else
							{
								<tspan x="@(x + 5 + ((textWidth + 12) * 0.85)/2)" dy="@lineHeight">@line</tspan>
							}
						}
					</text>
				</g>
			}
		</g>
	}
</svg>

<style>
    .graph-container {
        display: flex;
        align-items: flex-end;
        width: 800px;
        height: 400px;
        border: 1px solid #ccc;
        position: relative;
    }
    .bar {
        flex: 1;
        margin: 0 2px;
        background-color: #4CAF50;
        position: relative;
    }
    .bar .tooltip {
        visibility: hidden;
        background-color: #555;
        color: #fff;
        text-align: center;
        padding: 5px;
        border-radius: 5px;
        position: absolute;
        bottom: 100%;
        left: 50%;
        transform: translateX(-50%);
        white-space: nowrap;
        opacity: 0;
    }
    .bar:hover .tooltip {
        visibility: visible;
        opacity: 1;
    }
	.data-point:hover .tooltip-container {
		visibility: visible !important;
	}
	.tooltip-bg {
		filter: drop-shadow(0 1px 2px rgba(0,0,0,0.2));
	}
	.tooltip-text {
		dominant-baseline: middle;
	}
</style>

@code{
	private int userID;

	protected override async Task OnInitializedAsync()
	{
		userID = await SessionStorage.GetItemAsync<int>("UserID");
		if (userID == 0){
			throw new InvalidOperationException("Tried accessing journal without a User ID.");
		}
        
		/* Fetch expenses for the graph. 
        This is unneccessary as they will already be fetched in the journal. */
		// await ExpenseService.FetchPageOfExpensesAsync(userID);
	}
}