@page "/graph"
@inject ExpenseService ExpenseService
@inject AccountService AccountService
@inject ISessionStorageService SessionStorage

@layout MainLayout
@{
	// Chart dimensions and margins
	double marginLeft = 50, marginRight = 10, marginTop = 10, marginBottom = 30;
	double svgWidth = 720, svgHeight = 360;
	double chartWidth = svgWidth - marginLeft - marginRight;
	double chartHeight = svgHeight - marginTop - marginBottom;
	int n = ExpenseService.Expenses.Count;
	double maxAmount = (ExpenseService.Expenses.Any() && ExpenseService.Expenses.Max(e => e.Amount) > 0) ? (double)ExpenseService.Expenses.Max(e => e.Amount) : 1;
	var points = new List<string>();
	var circles = new List<(double x, double y, string name, decimal amount, double textWidth)>();
	for (var i = 0; i < n; i++){
		var expense = ExpenseService.Expenses[i];
		double x = marginLeft + (n > 1 ? i * (chartWidth / (n - 1)) : chartWidth / 2);
		double y = marginTop + chartHeight * (1 - (Convert.ToDouble(expense.Amount) / Convert.ToDouble(maxAmount)));
		points.Add($"{x},{y}");
		string tooltipText = $"{expense.Name}: ${expense.Amount:F2}";
		double textWidth = tooltipText.Length * 5.5; // Approximate width based on font size
		circles.Add((x, y, expense.Name, expense.Amount, textWidth));
	}
	var polylinePoints = string.Join(" ", points);

    int yTickCount = 5;
    var yTicks = new List<(double y, double val)>();
    for (int i = 0; i <= yTickCount; i++){
        double value = (maxAmount / yTickCount) * i;
        double yPos = marginTop + chartHeight * (1 - (i / (double)yTickCount));
        yTicks.Add((yPos, value));
    }
    int xTickCount = 4;
    var xTicks = new List<(double x, string label)>();
    if(ExpenseService.Expenses.Any()){
        var minDate = ExpenseService.Expenses.Min(e => e.Timestamp);
        var maxDate = ExpenseService.Expenses.Max(e => e.Timestamp);
        double totalDays = (maxDate.ToDateTime(TimeOnly.MinValue) - minDate.ToDateTime(TimeOnly.MinValue)).TotalDays;
        for (int i = 0; i <= xTickCount; i++){
            double frac = (double)i / xTickCount;
            double xPos = marginLeft + chartWidth * frac;
            var tickDate = totalDays == 0 ? minDate : minDate.AddDays((int)Math.Round(totalDays * frac));
            xTicks.Add((xPos, tickDate.ToShortDateString()));
        }
    }
}

<svg viewBox="0 0 720 360" width="100%" height="100%">
	<!-- Draw axes -->
	<line x1="@((int)marginLeft)" y1="@((int)(marginTop + chartHeight))" 
	      x2="@((int)(marginLeft + chartWidth))" y2="@((int)(marginTop + chartHeight))" stroke="black" />
	<line x1="@((int)marginLeft)" y1="@((int)marginTop)" 
	      x2="@((int)marginLeft)" y2="@((int)(marginTop + chartHeight))" stroke="black" />
	
	<!-- Draw y-axis ticks and labels -->
    @foreach(var (y, val) in yTicks)
    {
        <line x1="@((int)(marginLeft - 5))" y1="@((int)y)" 
              x2="@((int)marginLeft)" y2="@((int)y)" stroke="black" />
        <svg:text x="@((int)(marginLeft - 10))" y="@((int)y)" text-anchor="end" alignment-baseline="middle" font-size="10">
            $@val.ToString("0.##")
        </svg:text>
    }
    
    <!-- Draw x-axis ticks and labels -->
    @foreach(var (x, label) in xTicks)
    {
        <line x1="@((int)x)" y1="@((int)(marginTop + chartHeight))" 
              x2="@((int)x)" y2="@((int)(marginTop + chartHeight + 5))" stroke="black" />
        <svg:text x="@((int)x)" y="@((int)(marginTop + chartHeight + 15))" text-anchor="middle" font-size="10">
            @label
        </svg:text>
    }
	
	<!-- Axis labels -->
	<svg:text x="@((int)(marginLeft + chartWidth/2))" y="@((int)(svgHeight - 5))" text-anchor="middle">
	</svg:text>
	<svg:text x="15" y="@((int)(marginTop + chartHeight/2))" text-anchor="middle" transform='@($"rotate(-90,15,{(int)(marginTop + chartHeight/2)})")'>
	</svg:text>
	
	<!-- Draw line chart -->
	<polyline points="@polylinePoints" fill="none" stroke="#4CAF50" stroke-width="2" />
	
	<!-- Draw circular data points with tooltips -->
	@foreach(var (x, y, name, amount, textWidth) in circles)
	{
		<g class="data-point" onmouseover="this.parentNode.appendChild(this)">
			<circle cx="@x" cy="@y" r="4" fill="#4CAF50" />
			<g class="tooltip-container" visibility="hidden">
				<rect class="tooltip-bg" x="@(x + 5)" y="@(y - 22)" rx="4" ry="4"
					  width="@( (textWidth + 12) * 0.85)" height="16" fill="rgba(0,0,0,0.8)" />
				<text class="tooltip-text" x="@(x + 5 + ((textWidth + 12) * 0.85)/2)" y="@(y - 14)" 
					  fill="white" font-size="9px" text-anchor="middle">
					@name: $@amount.ToString("F2")
				</text>
			</g>
		</g>
	}
</svg>

<style>
    .graph-container {
        display: flex;
        align-items: flex-end;
        width: 800px;
        height: 400px;
        border: 1px solid #ccc;
        position: relative;
    }
    .bar {
        flex: 1;
        margin: 0 2px;
        background-color: #4CAF50;
        position: relative;
    }
    .bar .tooltip {
        visibility: hidden;
        background-color: #555;
        color: #fff;
        text-align: center;
        padding: 5px;
        border-radius: 5px;
        position: absolute;
        bottom: 100%;
        left: 50%;
        transform: translateX(-50%);
        white-space: nowrap;
        opacity: 0;
    }
    .bar:hover .tooltip {
        visibility: visible;
        opacity: 1;
    }
	.data-point:hover .tooltip-container {
		visibility: visible !important;
	}
	.tooltip-bg {
		filter: drop-shadow(0 1px 2px rgba(0,0,0,0.2));
	}
	.tooltip-text {
		dominant-baseline: middle;
	}
</style>

@code{
	private int userID;

	protected override async Task OnInitializedAsync()
	{
		userID = await SessionStorage.GetItemAsync<int>("UserID");
		if (userID == 0){
			throw new InvalidOperationException("Tried accessing journal without a User ID.");
		}
        
		/* Fetch expenses for the graph. 
        This is unneccessary as they will already be fetched in the journal. */
		// await ExpenseService.FetchPageOfExpensesAsync(userID);
	}
}